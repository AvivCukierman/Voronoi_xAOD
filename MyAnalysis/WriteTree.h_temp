#ifndef MyAnalysis_WriteTree_H
#define MyAnalysis_WriteTree_H

#include <EventLoop/Algorithm.h>

// Infrastructure include(s):
#include "xAODRootAccess/TEvent.h"
#include "xAODRootAccess/TStore.h"

// root includes
#include <TTree.h>

// c++ includes
#include <string>
#include <array>

class WriteTree : public EL::Algorithm
{

public:
  // standard across all algorithms for configuration
  bool m_debug = false;
  std::string m_eventInfo       = "EventInfo",

private:
  xAOD::TEvent *m_event; //!
  xAOD::TStore *m_store; //!
  TTree* m_tree; //!

  // everything below here is filled in the ttree
  int   m_eventNumber; //!

public:
  // this is a standard constructor
  WriteTree ();

  // these are the functions inherited from Algorithm
  virtual EL::StatusCode setupJob (EL::Job& job);
  virtual EL::StatusCode fileExecute ();
  virtual EL::StatusCode histInitialize ();
  virtual EL::StatusCode changeInput (bool firstFile);
  virtual EL::StatusCode initialize ();
  virtual EL::StatusCode execute ();
  virtual EL::StatusCode postExecute ();
  virtual EL::StatusCode finalize ();
  virtual EL::StatusCode histFinalize ();

  // this is needed to distribute the algorithm to the workers
  ClassDef(WriteTree, 1);
};

#endif
